#!/usr/bin/env python

import sys
import optparse
import os
import shutil
import xml2rfc
import lxml.etree


def display_version(self, opt, value, parser):
    print('.'.join(map(str, xml2rfc.VERSION)))
    sys.exit(1)


def clear_cache(self, opt, value, parser):
    cache_dir = os.path.expanduser('~/.cache/xml2rfc')
    shutil.rmtree(cache_dir, ignore_errors=True)
    print 'Deleted cache at', cache_dir
    sys.exit(1)


def main():
    # Populate options
    optionparser = optparse.OptionParser(usage='%prog SOURCE [options] ' \
                                         'FORMATS...\nExample: %prog ' \
                                         'draft.xml -f Draft-1.0 --text --html')
    optionparser.add_option('-v', '--verbose', action='store_true', \
                            dest='verbose', help='print extra information')
    optionparser.add_option('-q', '--quiet', action='store_true', dest='quiet',\
                            help='dont print anything')
    optionparser.add_option('-w', '--warn-error', action='store_true', \
                            dest='warn_error', help='treat warnings as ' \
                            'python exceptions.')
    optionparser.add_option('-e', '--extcss', dest='extcss',\
                            action='store_true', help='write an external '\
                            'link to the stylesheet instead of expanding it.')
    optionparser.add_option('-c', '--css', dest='css', \
                            help='specify an alternate css file (ignored if'\
                            ' html format is not enabled)')
    optionparser.add_option('-d', '--dtd', dest='dtd', \
                            help='specify an alternate dtd file')
    optionparser.add_option('-f', '--filename', dest='filename', \
                            help='specify an output filename')
    optionparser.add_option('', '--clear-cache', action='callback', \
                            help='purge the cache and exit', \
                            callback=clear_cache)
    optionparser.add_option('', '--version', action='callback', \
                            help='display the version number and exit', \
                            callback=display_version)

    formatgroup = optparse.OptionGroup(optionparser, 'Formats', 'At least one'\
                                       ' but as many as all of the following'\
                                       ' output formats must be specified.'\
                                       ' The destination file will be created'\
                                       ' according to the argument given to'\
                                       ' --filename.  If no argument was given'\
                                       ', it will create the file(s) '\
                                       '"output.format"')
    formatgroup.add_option('', '--raw', dest='raw', action='store_true', \
                           help='outputs to a text file, unpaginated')
    formatgroup.add_option('', '--text', dest='text', action='store_true', \
                           help='outputs to a text file with proper page ' \
                           'breaks')
    formatgroup.add_option('', '--nroff', dest='nroff', action='store_true', \
                           help='outputs to an nroff file')
    formatgroup.add_option('', '--html', dest='html', action='store_true', \
                           help='outputs to an html file')
    formatgroup.add_option('', '--exp', dest='exp', action='store_true', \
                           help='outputs to an XML file with all references'\
                           ' expanded.')

    optionparser.add_option_group(formatgroup)

    # Parse and validate arguments
    (options, args) = optionparser.parse_args()
    if len(args) < 1:
        optionparser.print_help()
        sys.exit(1)
    source = args[0]
    if not os.path.exists(source):
        print 'No such file:', source
        sys.exit(1)
    if not (options.raw or options.text or options.nroff or options.html):
        # Default to text output
        options.text = True
        
    # Setup warnings module
    if options.warn_error:
        xml2rfc.log.warn_error = True
    else:
        xml2rfc.log.warn_error = False

    # Run the parser
    parser = xml2rfc.XmlRfcParser(source, verbose=options.verbose,\
                                  quiet=options.quiet)

    try:
        xmlrfc = parser.parse()
    except lxml.etree.XMLSyntaxError, error:
        if not options.verbose:
            # Parser must have been printing on a single line. Fix this
            print ''
        xml2rfc.log.error('unable to parse the XML document: \r\n')
        xml2rfc.log.error('  ' + args[0] + ': ' + error.msg + '\r\n')
        sys.exit(1)

    # Execute any writers specified
    if options.filename:
        filename = options.filename
    else:
        # Create filename based on input
        filename = os.path.basename(source).rsplit('.', 1)[0]
    if options.raw:
        rawwriter = xml2rfc.RawTextRfcWriter(xmlrfc, \
                                             quiet=options.quiet, \
                                             verbose=options.verbose)
        rawwriter.write(filename + '-raw.txt')
    if options.text:
        pagedwriter = xml2rfc.PaginatedTextRfcWriter(xmlrfc, \
                                                     quiet=options.quiet, \
                                                     verbose=options.verbose)
        pagedwriter.write(filename + '.txt')
    if options.nroff:
        nroffwriter = xml2rfc.NroffRfcWriter(xmlrfc, \
                                             quiet=options.quiet, \
                                             verbose=options.verbose)
        nroffwriter.write(filename + '.nroff')
    if options.html:
        htmlwriter = xml2rfc.HtmlRfcWriter(xmlrfc, \
                                           quiet=options.quiet, \
                                           verbose=options.verbose, \
                                           external_css=options.extcss)
        htmlwriter.write(filename + '.html')

if __name__ == '__main__':
    main()
